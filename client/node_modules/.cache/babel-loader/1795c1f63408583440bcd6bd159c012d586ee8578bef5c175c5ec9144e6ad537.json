{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{encryptBiometric}from'../utils/crypto.ts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BiometricUpload=_ref=>{let{token,onResult}=_ref;const[file,setFile]=useState(null);const handleFileChange=e=>{if(e.target.files)setFile(e.target.files[0]);};const handleSubmit=async e=>{e.preventDefault();if(!file||!token){onResult('No file or token provided');return;}// Temporarily disable FaceTecSDK calls\n/*\n    await FaceTecSDK.initialize();\n    const livenessResult = await FaceTecSDK.performLivenessCheck(file);\n    if (!livenessResult.isLive) {\n      onResult('Liveness check failed');\n      return;\n    }\n    */const formData=new FormData();const encryptedData=encryptBiometric(file.name,'vault-key');formData.append('biometric',file,encryptedData);// formData.append('livenessData', JSON.stringify(livenessResult));\ntry{const response=await axios.post('http://system-api:3000/api/biometric/verify',formData,{headers:{'Content-Type':'multipart/form-data',Authorization:\"Bearer \".concat(token)}});onResult(response.data.message);}catch(err){var _error$response,_error$response$data;// Use AxiosError explicitly\nconst error=err;onResult('Verification failed: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message));}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",onChange:handleFileChange}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Verify Biometric\"})]});};export default BiometricUpload;","map":{"version":3,"names":["React","useState","axios","encryptBiometric","jsx","_jsx","jsxs","_jsxs","BiometricUpload","_ref","token","onResult","file","setFile","handleFileChange","e","target","files","handleSubmit","preventDefault","formData","FormData","encryptedData","name","append","response","post","headers","Authorization","concat","data","message","err","_error$response","_error$response$data","error","onSubmit","children","type","accept","onChange"],"sources":["/Users/pieterwjbouwer/Desktop/humanhash/humanhash-system/client/src/components/BiometricUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios, { AxiosError } from 'axios';\nimport { encryptBiometric } from '../utils/crypto.ts';\n\ninterface Props {\n  token: string;\n  onResult: (result: string) => void;\n}\n\nconst BiometricUpload: React.FC<Props> = ({ token, onResult }) => {\n  const [file, setFile] = useState<File | null>(null);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) setFile(e.target.files[0]);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!file || !token) {\n      onResult('No file or token provided');\n      return;\n    }\n\n    // Temporarily disable FaceTecSDK calls\n    /*\n    await FaceTecSDK.initialize();\n    const livenessResult = await FaceTecSDK.performLivenessCheck(file);\n    if (!livenessResult.isLive) {\n      onResult('Liveness check failed');\n      return;\n    }\n    */\n\n    const formData = new FormData();\n    const encryptedData = encryptBiometric(file.name, 'vault-key');\n    formData.append('biometric', file, encryptedData);\n    // formData.append('livenessData', JSON.stringify(livenessResult));\n\n    try {\n      const response = await axios.post('http://system-api:3000/api/biometric/verify', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      onResult(response.data.message);\n    } catch (err) {\n      // Use AxiosError explicitly\n      const error = err as AxiosError;\n      onResult('Verification failed: ' + (error.response?.data?.message || error.message));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n      <button type=\"submit\">Verify Biometric</button>\n    </form>\n  );\n};\n\nexport default BiometricUpload;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,KAAK,KAAsB,OAAO,CACzC,OAASC,gBAAgB,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAOtD,KAAM,CAAAC,eAAgC,CAAGC,IAAA,EAAyB,IAAxB,CAAEC,KAAK,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAC3D,KAAM,CAACG,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAc,IAAI,CAAC,CAEnD,KAAM,CAAAa,gBAAgB,CAAIC,CAAsC,EAAK,CACnE,GAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAAEJ,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAChD,CAAC,CAED,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAAH,CAAkB,EAAK,CACjDA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClB,GAAI,CAACP,IAAI,EAAI,CAACF,KAAK,CAAE,CACnBC,QAAQ,CAAC,2BAA2B,CAAC,CACrC,OACF,CAEA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAEI,KAAM,CAAAS,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/B,KAAM,CAAAC,aAAa,CAAGnB,gBAAgB,CAACS,IAAI,CAACW,IAAI,CAAE,WAAW,CAAC,CAC9DH,QAAQ,CAACI,MAAM,CAAC,WAAW,CAAEZ,IAAI,CAAEU,aAAa,CAAC,CACjD;AAEA,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAvB,KAAK,CAACwB,IAAI,CAAC,6CAA6C,CAAEN,QAAQ,CAAE,CACzFO,OAAO,CAAE,CACP,cAAc,CAAE,qBAAqB,CACrCC,aAAa,WAAAC,MAAA,CAAYnB,KAAK,CAChC,CACF,CAAC,CAAC,CACFC,QAAQ,CAACc,QAAQ,CAACK,IAAI,CAACC,OAAO,CAAC,CACjC,CAAE,MAAOC,GAAG,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACZ;AACA,KAAM,CAAAC,KAAK,CAAGH,GAAiB,CAC/BrB,QAAQ,CAAC,uBAAuB,EAAI,EAAAsB,eAAA,CAAAE,KAAK,CAACV,QAAQ,UAAAQ,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBH,IAAI,UAAAI,oBAAA,iBAApBA,oBAAA,CAAsBH,OAAO,GAAII,KAAK,CAACJ,OAAO,CAAC,CAAC,CACtF,CACF,CAAC,CAED,mBACExB,KAAA,SAAM6B,QAAQ,CAAElB,YAAa,CAAAmB,QAAA,eAC3BhC,IAAA,UAAOiC,IAAI,CAAC,MAAM,CAACC,MAAM,CAAC,SAAS,CAACC,QAAQ,CAAE1B,gBAAiB,CAAE,CAAC,cAClET,IAAA,WAAQiC,IAAI,CAAC,QAAQ,CAAAD,QAAA,CAAC,kBAAgB,CAAQ,CAAC,EAC3C,CAAC,CAEX,CAAC,CAED,cAAe,CAAA7B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}